CREATE TABLE IF NOT EXISTS public.t_drone
(
    serial_number VARCHAR(100) NOT NULL,
    model VARCHAR(50)  NOT NULL,
    weight_limit VARCHAR(5) NOT NULL,
    battery_capacity NUMERIC(3,2),
    state numeric(1) NOT NULL,
    CONSTRAINT t_drone_pkey PRIMARY KEY (serial_number)
);


CREATE TABLE IF NOT EXISTS public.t_medication
(
    code VARCHAR(50) NOT NULL,
    name VARCHAR(50) NOT NULL,
    weight VARCHAR(10) NOT NULL,
    image text,
    CONSTRAINT t_medication_pkey PRIMARY KEY (code)
);



CREATE TABLE IF NOT EXISTS public.t_medication_load_details
(
    id_load_details int4 NOT NULL generated by default as identity,
    start_point VARCHAR(50) NOT NULL,
    end_point VARCHAR(50) NOT NULL,
    time_to_load TIMESTAMP NOT NULL,
    fk_serial_number VARCHAR(100),
    fk_code VARCHAR(50),
    CONSTRAINT t_medication_load_details_pkey PRIMARY KEY (id_load_details),
    CONSTRAINT t_medication_code_fkey FOREIGN KEY (fk_code)
    REFERENCES public.t_medication (code),
    CONSTRAINT t_drone_serial_number_fkey FOREIGN KEY (fk_serial_number)
    REFERENCES public.t_drone (serial_number)
    );




CREATE TABLE IF NOT EXISTS public.t_medication_delivery_details
(
    id_delivery_details int4 NOT NULL generated by default as identity,
    delivered_time TIMESTAMP NOT NULL,
    fk_id_load_details int4 NOT NULL,
    CONSTRAINT t_medication_delivery_details_pkey PRIMARY KEY (id_delivery_details),
    CONSTRAINT t_medication_load_details_fkey FOREIGN KEY (fk_id_load_details)
        REFERENCES public.t_medication_load_details (id_load_details)
);


CREATE TABLE IF NOT EXISTS public.t_state_dict
(
    id_state NUMERIC NOT NULL,
    state_name varchar(20) NOT NULL,
    CONSTRAINT t_state_dict_pkey PRIMARY KEY (id_state)
);


create index t_drone_state_idx on public.t_drone using btree (state);

create sequence t_medication_load_details_seq
    MINVALUE 1
    MAXVALUE 999999999
    INCREMENT BY 1
    START WITH 202700
    NOCACHE
NOCYCLE;

create sequence t_medication_delivery_details_seq
    MINVALUE 1
    MAXVALUE 999999999
    INCREMENT BY 1
    START WITH 202700
    NOCACHE
NOCYCLE;




INSERT INTO public.t_drone(serial_number, battery_capacity, model, state, weight_limit) VALUES ('Q345HF345YSDS', 0.98, 'Sony', 0, '400.0');
INSERT INTO public.t_drone(serial_number, battery_capacity, model, state, weight_limit) VALUES ('Q345HF3457809', 0.95, 'Sony', 0, '300.0');
INSERT INTO public.t_drone(serial_number, battery_capacity, model, state, weight_limit) VALUES ('SDFL4LERRFJDF', 0.92, 'Sony', 0, '450.0');
INSERT INTO public.t_drone(serial_number, battery_capacity, model, state, weight_limit) VALUES ('23LJH4L344J23', 0.93, 'Sony', 0, '400.0');
INSERT INTO public.t_drone(serial_number, battery_capacity, model, state, weight_limit) VALUES ('DFJH44R533H44', 0.98, 'Sony', 0, '430.0');
INSERT INTO public.t_medication(code, image, name, weight) VALUES ('REWD12LJ89434', 'Aspirin.jpeg', 'Aspirin', '20.0');
INSERT INTO public.t_medication(code, image, name, weight) VALUES ('REWD12LJ34555', 'Allopurinol.jpeg', 'Allopurinol', '25.0');
INSERT INTO public.t_medication(code, image, name, weight) VALUES ('REWD12LJ89111', 'Gliclazide.jpeg', 'Gliclazide', '20.0');
INSERT INTO public.t_medication(code, image, name, weight) VALUES ('REWD12LJ89321', 'Hydrocortisone for skin.jpeg', 'Hydrocortisone for skin', '30.0');
INSERT INTO public.t_medication(code, image, name, weight) VALUES ('REWD12LJ89432', 'Ketoconazole.jpeg', 'Ketoconazole', '20.0');
INSERT INTO public.t_state_dict(id_state, state_name) VALUES (0, 'IDLE');
INSERT INTO public.t_state_dict(id_state, state_name) VALUES (1, 'LOADING');
INSERT INTO public.t_state_dict(id_state, state_name) VALUES (2, 'LOADED');
INSERT INTO public.t_state_dict(id_state, state_name) VALUES (3, 'DELIVERING');
INSERT INTO public.t_state_dict(id_state, state_name) VALUES (4, 'DELIVERED');
INSERT INTO public.t_state_dict(id_state, state_name) VALUES (5, 'RETURNING');
